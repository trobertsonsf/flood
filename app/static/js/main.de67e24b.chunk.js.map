{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["barWrapper","width","barWidth","height","display","border","label","float","margin","DEFAULT_BUILDINGS","genRandom","newVal","Math","floor","random","buildMaxesTable","arr","maxesFromLeft","i","length","curr","max","maxesFromRight","j","console","log","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bldgs","table","userInput","updateUserInput","bind","assertThisInitialized","getBuildingStyles","getNew","goOnClick","genBuilding","addNBuildings","addBuildings","startTimer","tbl","setState","e","target","value","newVals","push","setBuildings","JSON","parse","Array","isArray","Error","filter","x","error","alert","units","idx","bh","totalHeight","_this$state","fill","diff","min","findFillAmount","bldg","background","sky","u","styles","react_default","a","createElement","style","key","concat","_this2","setInterval","n","slice","_this3","marginLeft","map","onClick","marginTop","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de67e24b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst barWidth = 80;\nconst numBars = 10;\nconst totalWidth = barWidth * numBars;\nconst totalHeight = 500;\n\nconst barWrapper = {\n  width: barWidth - 2,\n  // background: 'red',\n  height: totalHeight,\n  display: \"inline-block\",\n  border: \"1px solid white\"\n};\n\nlet label = {\n  display: \"block\",\n  float: \"left\",\n  margin: \"15px\"\n};\n\nconst DEFAULT_BUILDINGS = [4, 6, 2, 8, 5, 2, 4, 5, 9, 2];\n\nconst genRandom = () => {\n  let newVal = Math.floor(Math.random() * 100000) % 11;\n  return newVal === 0 ? 1 : newVal;\n};\n\nconst buildMaxesTable = arr => {\n  const maxesFromLeft = [];\n  for (let i = 0; i < arr.length; i++) {\n    const curr = arr[i];\n    if (i === 0) {\n      maxesFromLeft[i] = curr;\n    } else {\n      maxesFromLeft[i] = Math.max(curr, maxesFromLeft[i - 1]);\n    }\n  }\n\n  const maxesFromRight = [];\n  for (let j = arr.length - 1; j >= 0; j--) {\n    const curr = arr[j];\n    if (j === arr.length - 1) {\n      maxesFromRight[j] = curr;\n    } else {\n      maxesFromRight[j] = Math.max(curr, maxesFromRight[j + 1]);\n    }\n  }\n\n  return [maxesFromLeft, maxesFromRight];\n};\n\nconsole.log(buildMaxesTable(DEFAULT_BUILDINGS));\n\nconst findFillAmount = (units, idx, bldgs, table) => {\n  let fill = 0;\n  if (idx > 0 && idx < bldgs.length - 1) {\n    /* Uncomment these lines to do the brute force approach to find fills */\n    // let leftMax = Math.max(...bldgs.slice(0, idx));\n    // let rightMax = Math.max(...bldgs.slice(idx + 1));\n    // let diff = Math.min(leftMax, rightMax);\n\n    //slow way times...\n    //10,000 Time to compute fill (ms) 528\n    //100,000 Time to compute fill (ms) 119083\n\n    //fast way times\n    // 10000 Time to compute fill (ms) 2\n    // 100000 Time to compute fill (ms) 17\n\n    /* uncomment this line to use the fast, table lookup approach */\n    let diff = Math.min(table[0][idx], table[1][idx]) - units;\n    if (diff > 0) {\n      fill = (totalHeight / 10) * diff;\n    }\n\n\n  }\n  return fill;\n};\n\n/* uncomment to test the speed of the impl for finding fills */\n// const tenX = function() {\n//   let a = [];\n//   for(let i =0; i < 10000; i++) {\n//     a = a.concat(DEFAULT_BUILDINGS);\n//   }\n//   return a;\n// }();\n// const tenXTable = buildMaxesTable(tenX);\n// console.log('finding ammounts for array length', tenX.length);\n// let start = Date.now();\n// findFillAmount(tenX.map((units, idx, bldgs) => {\n//   findFillAmount(units, idx, bldgs, tenXTable);\n// }))\n// console.log(\"Time to compute fill (ms)\", Date.now() - start);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bldgs: DEFAULT_BUILDINGS,\n      table: buildMaxesTable(DEFAULT_BUILDINGS),\n      userInput: \"\"\n    };\n\n    this.updateUserInput = this.updateUserInput.bind(this);\n    this.getBuildingStyles = this.getBuildingStyles.bind(this);\n    this.getNew = this.getNew.bind(this);\n    this.goOnClick = this.goOnClick.bind(this);\n    this.genBuilding = this.genBuilding.bind(this);\n    this.addNBuildings = this.addNBuildings.bind(this);\n    this.addBuildings = this.addBuildings.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n  }\n\n  setBuildings(arr) {\n    const tbl = buildMaxesTable(arr);\n    this.setState({\n      bldgs: arr,\n      table: tbl\n    });\n  }\n\n  updateUserInput(e) {\n    this.setState({ userInput: e.target.value });\n  }\n\n  getNew() {\n    const newVals = [];\n    while (newVals.length < 10) {\n      newVals.push(genRandom());\n    }\n    this.setBuildings(newVals);\n  }\n\n  goOnClick() {\n    try {\n      const arr = JSON.parse(this.state.userInput);\n      if (!Array.isArray(arr) || arr.length !== 10) {\n        throw new Error(\"nope\");\n      }\n      if (arr.filter(x => x <= 10 && x >= 1).length !== 10) {\n        throw new Error(\"nuupe\");\n      }\n      this.setBuildings(arr);\n    } catch (e) {\n      console.error(\"no way jose\");\n      alert(\"no way jose\");\n    }\n  }\n\n  getBuildingStyles(units, idx) {\n    const bh = (totalHeight / 10) * units;\n    const { bldgs, table } = this.state;\n    let fill = findFillAmount(units, idx, bldgs, table);\n\n    const sky = totalHeight - bh - fill;\n    return {\n      bldg: {\n        background: \"grey\",\n        height: bh,\n        width: \"100%\"\n      },\n      fill: {\n        background: \"blue\",\n        height: fill\n      },\n      sky: {\n        background: \"white\",\n        height: sky\n      }\n    };\n  }\n\n  genBuilding(u, idx) {\n    const styles = this.getBuildingStyles(u, idx);\n    return (\n      <div style={barWrapper} key={`${u}-${idx}`}>\n        <div style={styles.sky} />\n        <div style={styles.fill} />\n        <div style={styles.bldg}>\n          <span style={label}>{u}</span>\n        </div>\n      </div>\n    );\n  }\n\n  startTimer() {\n    setInterval(() => {\n      this.addNBuildings(1);\n    }, 200);\n  }\n\n  addNBuildings(n) {\n    let { bldgs } = this.state;\n    bldgs = bldgs.slice(n);\n    for (let i = 0; i < n; i++) {\n      bldgs.push(genRandom());\n    }\n    this.setBuildings(bldgs);\n  }\n\n  addBuildings(n) {\n    return () => {\n      this.addNBuildings(n);\n    };\n  }\n\n  render() {\n    return (\n      <div style={{ marginLeft: \"20px\" }}>\n        <h1>flood game</h1>\n        <div\n          style={{\n            width: totalWidth,\n            border: \"1px solid black\",\n            height: totalHeight,\n            display: \"inline-block\"\n          }}\n        >\n          {this.state.bldgs.map(this.genBuilding)}\n        </div>\n        <div style={{ marginLeft: \"10px\" }}>\n          <button onClick={this.getNew}>Gen New Buildings</button>\n          <button onClick={this.addBuildings(3)}>Add 3</button>\n          <button onClick={this.addBuildings(5)}>Add 5</button>\n          <button onClick={this.startTimer}>Start loop</button>\n          <div style={{ marginTop: \"20px\" }}>\n            Input your own, ex: [1,2,3,4,5,6,7,8,9,10] must be a json array of\n            10 numbers between 1 and 10{\" \"}\n            <input\n              type=\"text\"\n              onChange={this.updateUserInput}\n              value={this.state.userInput}\n            />\n            <button onClick={this.goOnClick}>go</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}